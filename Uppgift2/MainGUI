package View;

import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import Controller.Controller;

@SuppressWarnings("serial")
public class MainGUI extends javax.swing.JFrame {

	Controller controller;
	DefaultTableModel DataModel;

	public MainGUI() throws SQLException {
		initializeComponents();

		controller = new Controller();

	}

	private void initializeComponents() {

		/*----------------------------------------------------------------------------------------------------------*/
		/*--------------------------------------------- DECLARE OBJECTS! -------------------------------------------*/
		/*----------------------------------------------------------------------------------------------------------*/


	
	
		Data = new javax.swing.JPanel();
		DataLabel = new javax.swing.JLabel();
		DataTableScrollPane = new javax.swing.JScrollPane();	
		DataTable = new javax.swing.JTable();
		DataModel = new javax.swing.table.DefaultTableModel();
		AbsenceContentButton = new javax.swing.JButton();
		ShowEmployeeContentButton = new javax.swing.JButton();
		EmployeeLabel = new javax.swing.JLabel();
		MetadataLabel = new javax.swing.JLabel();
		EmployeeMetadataButton = new javax.swing.JButton();
		DatabaseKeysButton = new javax.swing.JButton();
		DatabaseIndexButton = new javax.swing.JButton();
		TableConstraintsButton = new javax.swing.JButton();
		AllTablesButton = new javax.swing.JButton();
		EmployeeColumnsButton = new javax.swing.JButton();
		TableMostRowsButton = new javax.swing.JButton();
		RelativeContentButton = new javax.swing.JButton();
		QualificationContentButton = new javax.swing.JButton();
		AbsenceMetadataButton = new javax.swing.JButton();
		RelativeMetadataButton = new javax.swing.JButton();
		QualificationMetadataButton = new javax.swing.JButton();

		/*----------------------------------------------------------------------------------------------------------*/
		/*-------------------------------------------------- BUTTONS! ----------------------------------------------*/
		/*----------------------------------------------------------------------------------------------------------*/


		
		EmployeeMetadataButton.setText("Find Employee Meta Data");
		EmployeeMetadataButton.addActionListener(new java.awt.event.ActionListener(){
			public void actionPerformed(java.awt.event.ActionEvent evt){
				try {
					EmployeeMetadataButtonActionPerformed(evt);
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		});

		

		DatabaseKeysButton.setText("Find Database Keys");
		DatabaseKeysButton.addActionListener(new java.awt.event.ActionListener(){
			public void actionPerformed(java.awt.event.ActionEvent evt){
				DatabaseKeysButtonActionPerformed(evt);
			}
		});

		DatabaseIndexButton.setText("Find Database Index");
		DatabaseIndexButton.addActionListener(new java.awt.event.ActionListener(){
			public void actionPerformed(java.awt.event.ActionEvent evt){
				try {
					DatabaseIndexButtonActionPerformed(evt);
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		});


		TableConstraintsButton.setText("Find All Table Constraints");
		TableConstraintsButton.addActionListener(new java.awt.event.ActionListener(){
			public void actionPerformed(java.awt.event.ActionEvent evt){
				try {
					TableConstraintsButtonActionPerformed(evt);
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		});
		AllTablesButton.setText("All Meta Data");
		AllTablesButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				try {
					AllTablesButtonActionPerformed(evt);
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		});
		
		ShowEmployeeContentButton.setText("Show Employee Content");
		ShowEmployeeContentButton.addActionListener(new java.awt.event.ActionListener(){  // KLAR
			public void actionPerformed(java.awt.event.ActionEvent evt){
				try {
					ShowEmployeeContentButtonActionPerformed(evt);
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		});
		
		EmployeeColumnsButton.setText("Show Employee Columns");
		EmployeeColumnsButton.addActionListener(new java.awt.event.ActionListener(){
			public void actionPerformed(java.awt.event.ActionEvent evt){
				try {
					EmployeeColumnsButtonActionPerformed(evt);
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		});
		
		TableMostRowsButton.setText("Table With Most Rows");
		TableMostRowsButton.addActionListener(new java.awt.event.ActionListener(){
			public void actionPerformed(java.awt.event.ActionEvent evt){
				try {
					TableMostRowsButtonActionPerformed(evt);
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			
			
		});
		
		AbsenceContentButton.setText("Show Absence Content");
		AbsenceContentButton.addActionListener(new java.awt.event.ActionListener(){  // KLAR
			public void actionPerformed(java.awt.event.ActionEvent evt){
				try {
					AbsenceContentButtonActionPerformed(evt);
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		});

		RelativeContentButton.setText("Show Relative Content");
		RelativeContentButton.addActionListener(new java.awt.event.ActionListener(){  // KLAR
			public void actionPerformed(java.awt.event.ActionEvent evt){
				try {
					RelativeContentButtonActionPerformed(evt);
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		});
		
		QualificationContentButton.setText("Show Qualification Content");
		QualificationContentButton.addActionListener(new java.awt.event.ActionListener(){  // KLAR
			public void actionPerformed(java.awt.event.ActionEvent evt){
				try {
					QualificationContentButtonActionPerformed(evt);
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		});
		
		AbsenceMetadataButton.setText("Show Absence Metadata");
		AbsenceMetadataButton.addActionListener(new java.awt.event.ActionListener(){  // KLAR
			public void actionPerformed(java.awt.event.ActionEvent evt){
				try {
					AbsenceMetadataButtonActionPerformed(evt);
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		});
		
		RelativeMetadataButton.setText("Show Relative Metadata");
		RelativeMetadataButton.addActionListener(new java.awt.event.ActionListener(){  // KLAR
			public void actionPerformed(java.awt.event.ActionEvent evt){
				try {
					RelativeMetadataButtonActionPerformed(evt);
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		});
		
		QualificationMetadataButton.setText("Show Qualification Metadata");
		QualificationMetadataButton.addActionListener(new java.awt.event.ActionListener(){  // KLAR
			public void actionPerformed(java.awt.event.ActionEvent evt){
				try {
					QualificationMetadataButtonActionPerformed(evt);
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		});

		/*----------------------------------------------------------------------------------------------------------*/
		/*------------------------------------------------ LABELS! -------------------------------------------------*/
		/*----------------------------------------------------------------------------------------------------------*/

		DataLabel.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
		DataLabel.setText("DATA");
		
		


		/*----------------------------------------------------------------------------------------------------------*/
		/*--------------------------------------------- DATA TABLE! ---------------------------------------------*/
		/*----------------------------------------------------------------------------------------------------------*/

		DataTable.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
		DataTable.setModel(DataModel = new DefaultTableModel(new Object [][] {
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null}},
				new String [] {
				"", "", "", "", "", "", "", ""
		}) { Class[] types = new Class [] {
				java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, 
				java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
		};

		public Class getColumnClass(int columnIndex) {
			return types [columnIndex];
		}
		});

		DataTable.getTableHeader().setReorderingAllowed(false);
		DataTableScrollPane.setViewportView(DataTable);
		DataTable.getColumnModel().getColumn(0).setHeaderValue("");
		DataTable.getColumnModel().getColumn(1).setHeaderValue("");
		DataTable.getColumnModel().getColumn(2).setHeaderValue("");
		DataTable.getColumnModel().getColumn(3).setHeaderValue("");
		DataTable.getColumnModel().getColumn(4).setHeaderValue("");
		DataTable.getColumnModel().getColumn(5).setHeaderValue("");
		DataTable.getColumnModel().getColumn(6).setHeaderValue("");
		DataTable.getColumnModel().getColumn(7).setHeaderValue("");

		

		/*----------------------------------------------------------------------------------------------------------*/
		/*--------------------------------------------- LAYOUTS! ---------------------------------------------*/
		/*----------------------------------------------------------------------------------------------------------*/
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGap(4, 4, 4)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addGroup(layout.createSequentialGroup()
										.addGap(187, 187, 187)
										.addComponent(DataLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGroup(layout.createSequentialGroup()
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(layout.createSequentialGroup()
																.addGap(36, 36, 36)
																
																
																.addComponent(ShowEmployeeContentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
																.addGroup(layout.createSequentialGroup()
																		
																		.addComponent(DatabaseIndexButton)
																		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																		
																		.addComponent(DataTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																		.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																				.addGroup(layout.createSequentialGroup()
																						
																						.addComponent(TableConstraintsButton)
																						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																						.addComponent(AllTablesButton))
																						.addComponent(MetadataLabel)
																						.addGroup(layout.createSequentialGroup()
																								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
																										.addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
																												
																												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
																														
																														.addGroup(layout.createSequentialGroup()
																																
																																.addComponent(EmployeeMetadataButton))))
																																
																																.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																																		.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																																				
																																				.addComponent(DatabaseKeysButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																																				
																																				.addContainerGap(62, Short.MAX_VALUE);
				);




		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGap(18, 18, 18)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								
								.addComponent(DataLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGap(18, 18, 18)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(EmployeeLabel)
										.addComponent(MetadataLabel))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												
												
												.addComponent(ShowEmployeeContentButton)
												.addComponent(EmployeeMetadataButton)
												
												.addGap(25, 25, 25)
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(layout.createSequentialGroup()
																
																
																
																.addComponent(DatabaseKeysButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
																
																.addComponent(DataTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE))
																.addGap(18, 18, 18)
																.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE);
		pack();
	}

	/*----------------------------------------------------------------------------------------------------------*/
	/*----------------------------------------------- METHODS! -------------------------------------------------*/
	/*----------------------------------------------------------------------------------------------------------*/


		private void EmployeeMetadataButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
        DataModel.setRowCount(0); // DELETES ALL ROWS!
		DataTable.setModel(controller.getEmployeeMetaData(DataModel));
	
		
	}
    
		private void DatabaseKeysButtonActionPerformed(java.awt.event.ActionEvent evt)  throws SQLException {
    DataModel.setRowCount(0); // DELETE ALL ROWS!
    DataTable.setModel(controller.getDatabaseKeys(DataModel));
	

	}

	private void DatabaseIndexButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
		 DataModel.setRowCount(0); // DELETE ALL ROWS
		 DataTable.setModel(controller.getDatabaseIndexes(DataModel));
	}
	
	private void ShowEmployeeContentButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
		DataModel.setRowCount(0);  // DELETES ALL ROWS!
		DataTable.setModel(controller.getEmployeeContent(DataModel));
	}
	
	private void TableConstraintsButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
		DataModel.setRowCount(0); // DELETE ALL ROWS!
		DataTable.setModel(controller.getTableConstraints(DataModel));
	}
	
	private void AllTablesButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
		DataModel.setRowCount(0); // DELETE ALL ROWS!
		DataTable.setModel(controller.getAllTables(DataModel));
	}
	private void EmployeeColumnsButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
		DataModel.setRowCount(0); // DELETE ALL ROWS!
		DataTable.setModel(controller.getAllColumns(DataModel));
	}
	private void TableMostRowsButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
		DataModel.setRowCount(0); // DELETE ALL ROWS!
		DataTable.setModel(controller.getTableMostRows(DataModel));
	}
	
	private void AbsenceContentButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
		DataModel.setRowCount(0);  // DELETES ALL ROWS!
		DataTable.setModel(controller.getAbsenceContent(DataModel));
	}
	private void RelativeContentButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
		DataModel.setRowCount(0);  // DELETES ALL ROWS!
		DataTable.setModel(controller.getRelativeContent(DataModel));
	}
	private void QualificationContentButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
		DataModel.setRowCount(0);  // DELETES ALL ROWS!
		DataTable.setModel(controller.getQualificationContent(DataModel));
	}
	private void AbsenceMetadataButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
		DataModel.setRowCount(0);  // DELETES ALL ROWS!
		DataTable.setModel(controller.getAbsenceMetadata(DataModel));
	}
	private void RelativeMetadataButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
		DataModel.setRowCount(0);  // DELETES ALL ROWS!
		DataTable.setModel(controller.getRelativeMetadata(DataModel));
	}
	private void QualificationMetadataButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
		DataModel.setRowCount(0);  // DELETES ALL ROWS!
		DataTable.setModel(controller.getQualificationMetadata(DataModel));
	}



	
	

	



	

	

	/*----------------------------------------------------------------------------------------------------------*/
	/*------------------------------------------- OBJECT CREATION! ---------------------------------------------*/
	/*----------------------------------------------------------------------------------------------------------*/
    private javax.swing.JButton EmployeeColumnsButton;
	private javax.swing.JButton TableConstraintsButton;
	private javax.swing.JButton AllTablesButton;
	private javax.swing.JButton DatabaseKeysButton;
	private javax.swing.JLabel EmployeeLabel;
	private javax.swing.JLabel MetadataLabel;
	private javax.swing.JButton EmployeeMetadataButton;
	private javax.swing.JButton ShowEmployeeContentButton;
	private javax.swing.JButton DatabaseIndexButton;
	private javax.swing.JLabel DataLabel;
	private javax.swing.JTable DataTable;
	private javax.swing.JScrollPane DataTableScrollPane;
	private javax.swing.JPanel Data;
	private javax.swing.JButton TableMostRowsButton;
	private javax.swing.JButton AbsenceContentButton;
	private javax.swing.JButton RelativeContentButton;
	private javax.swing.JButton QualificationContentButton;
	private javax.swing.JButton AbsenceMetadataButton;
	private javax.swing.JButton RelativeMetadataButton;
	private javax.swing.JButton QualificationMetadataButton;
}
